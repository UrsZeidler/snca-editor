[comment encoding = UTF-8 /]
[module generateJsonSchema('http://www.sernet.de/hitro', 'http://www.eclipse.org/emf/2002/Ecore')/]

[import de::sernet::eclipse::hui::model::codegen::main::hitroCommons /]

[template public generateJsonSchema(root : DocumentRoot)]
[comment @main /]
[for (e : Huientity | root.allISOEntities())]
[printEntitySchema(e)/]
[printLinks(e)/]
[/for]

[/template]


[query private toJsonId(p : Huiproperty) : String = p.id.toCamelCase().toLowerFirst() /]
[query private toJsonId(o : Option) : String = o.id.toCamelCase().toLowerFirst() /]
[query private toEntityName(e : Huientity) : String = e.id.toCamelCase() /]
[query private toLinkName(e : Huientity, r : Huirelation) : String = e.toEntityName().concat('_').concat(transformName(r)).concat('_').concat(r.to.toEntityName()) /]

[query public transformName(r : Huirelation) : String = if r.name.oclIsUndefined() then '' else r.name.toLower().replaceAll(' ', '_') endif/]


[query private isJsonProperty(p : Huiproperty) : Boolean = not(p.name = 'Name') and not(p.name='Title') /]
[query private allJsonProperties(e : Huientity) : OrderedSet(Huiproperty) = e.allProperties()->select(isJsonProperty()) /]


[template public printLinks (e : Huientity) ]
[for (r : Huirelation | e.huirelation)]
[printLink(r,e)/]
[/for]
[/template]

[template public printLink (r : Huirelation, e : Huientity) ]
[file ('link/'.concat(e.toLinkName(r)).concat('.json'), false, 'UTF-8')]
{
  "definitions": {},
  "$schema": "http://verinice.com/veo/draft-01/schema#",
  "type": "object",
  "description": "Schema for Links between [e.name/] and [r.to.name/]",
  "title": "[e.toLinkName(r)/]",
  "properties": {
    "$veo.id": {
      "type": "string",
      "title": "The UUID to identify the element"
    },
    "$veo.type": {
      "description": "The name of the type described by this schema.",
      "enum": ['['/]
        "[e.toLinkName(r)/]"
      [']'/]
    },
    "$veo.title": {
      "type": "string",
      "title": "The title of a link"
    },
    "source": {
      "type": "string",
      "title": "id of the [e.name/]"
    },
    "target": {
      "type": "string",
      "title": "id of the [r.to.name/]"
    }
  },
  "required":  ['['/]"type": "string"
    "$veo.id",
    "$veo.type",
    "source",
    "target"
 [']'/],
  "$veo.source.type": "[e.toEntityName()/]",
  "$veo.target.type": "[r.to.toEntityName()/]"
}
[/file]
[/template]


[template public printEntitySchema (e : Huientity) ]
[file ('entity/'.concat(e.toEntityName()).concat('.json'), false, 'UTF-8')]
{
  "definitions": {},
  "$schema": "http://verinice.com/veo/draft-01/schema#",
  "type": "object",
  "description": "Schema for [e.name/]",
  "title": "[e.name/]",
  "properties": {
    "$veo.id": {
      "type": "string",
      "title": "The UUID to identify the element"
    },
    "$veo.type": {
      "description": "The name of the type described by this schema.",
      "enum": ['['/]
        "[e.toEntityName()/]"
      [']'/]
    },
    "$veo.title": {
      "type": "string",
      "title": "The title of the [e.toEntityName()/]."
    },
    "parent": {
      "type": "string",
      "title": "The UUID to identify the parent"
    }[if (not e.allProperties()->isEmpty())],[/if]
[for (p : Huiproperty | e.allJsonProperties())separator (',\n')][printProperty(p)/][/for]
  },
  "required": ['['/]
    "$veo.id",
    "$veo.type",
    "parent",
    "$veo.title"[for (p : Huiproperty | e.allRequiredProperties()->select(isJsonProperty()))before (',\n')separator (',\n')]    "[p.toJsonId()/]"[/for]
   [']'/]
}
[/file]
[/template]

[template public printProperty (p : Huiproperty) ]
    "[p.toJsonId()/]": {
      "title": "[p.name/]",
[if (p.inputtype=Inputtypes::line or p.inputtype=Inputtypes::text)]
      "type": "string"
[elseif (p.inputtype=Inputtypes::booleanoption)]
      "type": "boolean"
[elseif (p.inputtype=Inputtypes::multioption)]
      "type": "array",
      "items": {
        "enum": ['['/]
[for (o : Option | p.option)separator (',\n')]        "[o.toJsonId()/]"[/for]
        [']'/]
      },
      "uniqueItems": true
[elseif (p.inputtype=Inputtypes::singleoption)]
[if (p.option->isEmpty())]
      "type": "string"
[else]
      "enum": ['['/]
[for (o : Option | p.option)separator (',\n')]        "[o.toJsonId()/]"[/for]
      [']'/]
[/if]
[elseif (p.inputtype=Inputtypes::numericoption)]
      "type": "integer"
[elseif (p.inputtype=Inputtypes::date)]
      "type": "string",
      "format": "date-time"
[/if]
    }[/template]


