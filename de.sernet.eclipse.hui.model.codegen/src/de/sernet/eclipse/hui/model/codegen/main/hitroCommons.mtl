[comment encoding = UTF-8 /]
[module hitroCommons('http://www.sernet.de/hitro', 'http://www.eclipse.org/emf/2002/Ecore')]



[query public toGraphFilename(e : Huientity) : String = e.id+'.dot' /]
[query public toGraphImageFilename(e : Huientity) : String = e.id+'.png' /]

[query public hasNoTags(p : Huipropertygroup) : Boolean =  p.tags.oclIsUndefined() or p.tags='' /]
[query public hasTags(p : Huipropertygroup) : Boolean =  not p.hasNoTags() /]
[query public hasNoTags(p : Huiproperty) : Boolean =  p.tags.oclIsUndefined() or p.tags='' /]
[query public hasTags(p : Huiproperty) : Boolean =  not p.hasNoTags() /]
[query public hasOptions(p : Huiproperty) : Boolean = not p.option->isEmpty() /]
[query public hasDefaultRule(p : Huiproperty) : Boolean = not p.defaultRule.oclIsUndefined() /]

[query public allTags(root : DocumentRoot) : Set(String) = root.huientities.huientity
	->collect(allProperties()
	->collect(tags))
	->flatten()
	->asSet()
	->union(root.huientities.huientity.huipropertygroup
		->collect(tags)->flatten()
		->asSet())
 /]


[query public toGraphId(e : Huientity) : String = e.id.replaceAll('-', '_') /]

[query public getOwner(r : Huirelation) : Huientity = r.eContainer().oclAsType(Huientity) /]
[query public allRelatedEntities(e : Huientity) : Set(Huientity) = e.huirelation -> collect(to)->asSet()
	->union(e.allOppositeRelations()->collect(getOwner()))->asSet()->excluding(e)->flatten()  /]


[query public isBPEntity(e : Huientity) : Boolean = e.id.startsWith('bp_') /]


[query public allBPEntities(root : DocumentRoot) : Sequence(Huientity) = 
	root.huientities.huientity->select(isBPEntity())/]


[query public allIsoIds(root : DocumentRoot) : Set(String) = Set{
'org',
'assetgroup',
'asset',
'persongroup',
'person-iso',
'auditgroup',
'audit',
'controlgroup',
'control',
'exceptiongroup',
'exception',
'requirementgroup',
'requirement',
'incident',
'incident_group',
'incident_scenario',
'incident_scenario_group',
'response',
'response_group',
'threat',
'threat_group',
'vulnerability',
'vulnerability_group',
'interview',
'interview_group',
'evidence',
'evidence_group',
'finding',
'finding_group',
'process',
'process_group',
'record',
'record_group',
'samt_topic'
} /]


[query public allISOEntities(root : DocumentRoot) : Sequence(Huientity) = 
	root.huientities.huientity->select(root.allIsoIds()->includes(id))/]

[query public allConfigurationIds(root : DocumentRoot) : Set(String) = Set{
'document',
'document_group',
'role',
'configuration',
'attachment',
'note'
} /]

[query public allConfigurationEntities(root : DocumentRoot) : Sequence(Huientity) = 
	root.huientities.huientity->select(root.allConfigurationIds()->includes(id))/]

[query public allOldBPEntities(root : DocumentRoot) : Sequence(Huientity) = 
	root.huientities.huientity->select(not root.allConfigurationIds()->includes(id)
		and (not root.allIsoIds()->includes(id))
		and (not isBPEntity())
)/]


[query public allProperties(e : Huientity) : OrderedSet(Huiproperty) = 
	e.huiproperty->addAll(e.huipropertygroup->collect(huiproperty)->flatten()) /]

[query public allPropertyGroups(e : Huientity) : OrderedSet(Huiproperty) = 
	e.huipropertygroup
	->addAll(e.huipropertygroup
		->collect(huiproperty)->flatten()
	)

 /]

[query public allRequiredProperties(e : Huientity) : OrderedSet(Huiproperty) = 
	e.allProperties()->select(required) /]

[query public basicreplace(s : String) : String = 
s.replaceAll('\\(', '').replaceAll('\\)', '').replaceAll('\\?', '').replaceAll('\\.', '').replaceAll('\\\\', '_')
.replaceAll('/', '_').replaceAll('-', '_').replaceAll('>', 'M').replaceAll(' ', '_').replaceAll('__', '_').replaceAll('__', '_') /]


[query public dependsOn(p : Huiproperty, dependend: Huiproperty) : Boolean = not p.depends->select(option.id=dependend.id)->isEmpty() /]
[query public allDependendProperties(p : Huiproperty) : OrderedSet(Huiproperty) = Huiproperty.allInstances()->select(dependsOn(p))->asOrderedSet() /]

[query public allOppositeRelations(e : Huientity) : Set(Huirelation) = Huirelation.allInstances()->select(to=e) /]



[query public toCamelCase(s : String) : String =   s.replaceAll('-','_').tokenize('_')->reduce().toUpperFirst() /]
[query public toCamelCaseFirstLower(s : String) : String =   s.tokenize('_')->reduce().toLowerFirst() /]

[query public toJavaIdentifier(s : String) : String =   s.basicreplace().tokenize('_')->reduce().toUpperFirst() /]

[template public reduce(ss : Sequence(String))]
[for (s : String | ss)]
[s.toUpperFirst()/][/for]
[/template]


[query public getValue(entry : EFeatureMapEntry) : OclAny
    = invoke('org.eclipse.emf.ecore.util.FeatureMap$Entry', 
             'getValue()', 
             Sequence{entry}) /]

[query public getFeature(entry : EFeatureMapEntry) : EStructuralFeature
    = invoke('org.eclipse.emf.ecore.util.FeatureMap$Entry', 
             'getEStructuralFeature()', 
             Sequence{entry}) /]


[query public getLocalizedName(e : Huientity, lang : String) : String = getLocalizedName(e, lang, '') /]
[query public getLocalizedName(e : Huientity, lang : String,key : String) : String = getProperty('snca-messages'+lang+'.properties', e.id+key) /]
[query public getLocalizedName(r : Huirelation, lang : String) : String = getLocalizedName(r, lang, '') /]
[query public getLocalizedName(r : Huirelation, lang : String,key : String) : String = getProperty('snca-messages'+lang+'.properties', r.id+key) /]
[query public getLocalizedName(p : Huiproperty, lang : String) : String = getLocalizedName(p, lang, '') /]
[query public getLocalizedName(p : Huiproperty, lang : String,key : String) : String = getProperty('snca-messages'+lang+'.properties', p.id+key) /]
[query public getLocalizedName(p : Huipropertygroup, lang : String) : String = getLocalizedName(p, lang, '') /]
[query public getLocalizedName(p : Huipropertygroup, lang : String,key : String) : String = getProperty('snca-messages'+lang+'.properties', p.id+key) /]
